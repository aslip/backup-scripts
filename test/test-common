# vim: set ft=sh:

set -e

PATH="$PATH:`readlink -f ../../src/bin`"; export PATH 
. "`backup-include util`"

#
# output functions
#

. ../colors

test_print() {
    echo -e "${C_BWHITE}$1${C_RESET}"
}

test_begin() {
    TEST_CURRENT=$1 # global
    # run-tests.sh will print a message so that we will know what exactly failed
    mkdir -p '/tmp/backup-scripts'
    echo $TEST_CURRENT > '/tmp/backup-scripts/test-current'
}

test_end() {
    test_print "$TEST_CURRENT - ${C_BGREEN}OK"
    echo -e "\n\n"
}

die() {
    echo -e "${C_BRED}$1${C_RESET}"
    exit 1
}



#
# test functions
#

cleanup() {
    test_print 'cleanup...'

    rm -rf '/tmp/backup-scripts'

    if [[ -e './tmp' ]]; then
        rm -r './tmp'
    fi
    if [[ -e "./$TEST_FILES_DIR" ]]; then
        rm -r "./$TEST_FILES_DIR"
    fi
    if [[ -e $TEST_SERVER_PATH ]]; then
        rm -r "$TEST_SERVER_PATH"
    fi
    if [[ -e "./$TEST_BACKUP_DIR" ]]; then
        rm -r "./$TEST_BACKUP_DIR"
    fi
    $MYSQL -e "DROP DATABASE IF EXISTS $TEST_DB"
    $MYSQL -e "CREATE DATABASE $TEST_DB DEFAULT CHARSET utf8"
}

use_data() {
    local data_to_use=$1

    # files
    rm -rf "./$TEST_FILES_DIR"
    # follow command line symlinks (since ./data/$files_to_use
    # may be a symlink); any symbolic link that is encountered via 
    # recursive traversal will be copied as is
    cp -aH "./data/$data_to_use/files" "./$TEST_FILES_DIR"

    # db
    cat "./data/$data_to_use/db.sql" | $MYSQL "$TEST_DB"
}



#
# files functions
#

restore_files() {
    local date=$1
    
    # guess full/incr backup
    local archive=$TEST_FILES_ALIAS # assume full backup by default
    if [[ -e "$TEST_SERVER_PATH/$date/files/$TEST_FILES_ALIAS.inc.1.dar" ]]; then
        if [[ -e "$TEST_SERVER_PATH/$date/files/$TEST_FILES_ALIAS.1.dar" ]]; then
            die 'Two different backups in the same dir!'
        else
            local archive="$TEST_FILES_ALIAS.inc" # incremental backup
        fi
    elif [[ ! -e "$TEST_SERVER_PATH/$date/files/$TEST_FILES_ALIAS.1.dar" ]]; then
        die 'No file backups found!'
    fi

    # actually restore
    echo "Restoring files from $archive"

    # don't produce error only when there is already a "restored-files" dir
    # this is different from "mkdir -p", because it will fail when e.g. "tmp" does not exist
    if [[ ! -e './tmp/restored-files' ]]; then
        mkdir './tmp/restored-files'
    fi
    if [[ $UID != 0 ]]; then
        local dar_opt=-O # ignore owner (owner can be restored only under root)
    fi
    # -w means "don't warn when overwriting files" and it must be there 
    # if we are simply restoring an archive
    dar $dar_opt -w -x "$TEST_SERVER_PATH/$date/files/$archive" -R './tmp/restored-files'
}

check_files() {
    local reference=$1
    diff -r './tmp/restored-files' "./data/$reference/files"
    # keep the restored-files dir for incremental restores
}



#
# db functions
#

restore_db_full() {
    local date=$1

    local sql="$TEST_SERVER_PATH/$date/db/$TEST_DB.sql.bz2"
    echo "Restoring db from $sql"
    bunzip2 -kc "$sql" > './tmp/restored-db.sql'
    cat './tmp/restored-db.sql' | $MYSQL "$TEST_DB"
    # keep the restored-db.sql for incremental restores
}

restore_db_incr() {
    local date=$1

    local sql="$TEST_SERVER_PATH/$date/db/$TEST_DB.sql.inc.bz2"
    echo "Restoring db from $sql"
    bunzip2 -kc "$sql" > './tmp/sql.inc'
    # suppress diagnostics (ed's man requires this when ed's stdin is from script)
    ed -s './tmp/restored-db.sql' < './tmp/sql.inc'
    rm './tmp/sql.inc'
    cat './tmp/restored-db.sql' | $MYSQL "$TEST_DB"
}

restore_db() {
    local date=$1
    if [[ -e "$TEST_SERVER_PATH/$date/db/$TEST_DB.sql.inc.bz2" ]]; then
        if [[ -e "$TEST_SERVER_PATH/$date/db/$TEST_DB.sql.bz2" ]]; then
            die 'Two different db backups in the same dir!'
        else
            restore_db_incr "$date"
        fi
    elif [[ -e "$TEST_SERVER_PATH/$date/db/$TEST_DB.sql.bz2" ]]; then
        restore_db_full "$date"
    else
        die 'No database backups found!'
    fi
}

. "`backup-include mysql`" # for backup_mysql_dump

check_db() {
    local reference=$1
    backup_mysql_dump "$TEST_DB" "$TEST_USER" "$TEST_PASS" "$TEST_EXCLUDE_TABLES" '' './restored.sql'
    diff './restored.sql' "./data/$reference/reference.sql"
    rm './restored.sql'
}

check_ignore_tables() {
    # FIXME: does not work
    grep -vi 'table2' './tmp/restored-db.sql' > /dev/null
    grep -vi 'table3' './tmp/restored-db.sql' > /dev/null
}



#
# initialization
#

test_begin 'initialization'
    TEST_BACKUP_DIR=${TEST_BACKUP_DIR-'local_dir'}; export TEST_BACKUP_DIR
    TEST_FILES_DIR=${TEST_FILES_DIR-'www'}; export TEST_FILES_DIR # files to backup
    TEST_FILES_ALIAS=${TEST_FILES_ALIAS-'test'}; export TEST_FILES_ALIAS
    TEST_EXCLUDE_TABLES=${TEST_EXCLUDE_TABLES-'table2
        table3'}; export TEST_EXCLUDE_TABLES # newline intended
    TEST_SERVER=${TEST_SERVER-"`whoami`@localhost"}; export TEST_SERVER
    TEST_SERVER_PATH=${TEST_SERVER_PATH-"`readlink -f .`/srv"}; export TEST_SERVER_PATH # server path should be absolute

    TEST_DB=${TEST_DB-'backup_test'}; export TEST_DB
    TEST_USER=${TEST_USER-'root'}; export TEST_USER
    TEST_PASS=${TEST_PASS-''}; export TEST_PASS

    MYSQL='mysql -uroot'

    cleanup

    mkdir '/tmp/backup-scripts'
    mkdir "$TEST_SERVER_PATH"
    mkdir './tmp'
test_end

