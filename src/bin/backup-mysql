#!/bin/bash

set -e 

usage()
{
cat << EOF
Makes a backup of a mysql database.

Usage
    ${0##*/} database username password [options]

Options
    --extra-opt opts
        Extra options to pass to mysqldump. Multiple options are permitted.

    --exclude tables
        List of tables to exclude, separated by spaces. Multiple options are permitted.
        No data will be dumped for excluded table, only the table definition.

    --incremental, -i
        Make an incremental backup; valid only in automated mode.

    -o filename
        Perform a manual backup into filename.

Notes
    Automated backup is placed into BACKUP_DIR/BACKUP_DATE/db/database.sql.bz2 file, where BACKUP_DIR is a
    user-defined environment variable and BACKUP_DATE is current date in YYYY-MM-DD format.

Examples
    manual backup:
        ${0##*/} karta kartauser '' --exclude 'cache cache_content' -o /path/to/backup.sql
        
    automated backup:
        ${0##*/} karta kartauser '' --exclude cache --exclude cache_content

    automated incremental backup:
        ${0##*/} karta kartauser '' --exclude 'cache cache_content' --incremental

    extra options:
        ${0##*/} karta kartauser '' --exclude 'cache cache_content' --extra-opt='-Cqu --comments' --extra-opt='--help'
EOF
    exit 1
}


# parse parameters
. "`backup-include util`"

if (($# < 3)); then usage; fi

db=$1
user=$2
pass=$3
shift 3

me=`abs_basename "$0"`
opt=`getopt -n"$me" --longoptions="extra-opt: exclude: incremental" "o:i" "$@"` || exit 1
eval set -- $opt
while (($# > 0)); do
    case $1 in
        --extra-opt)
            extra_opt=${extra_opt+"$extra_opt "}$2; shift;; # separate multiple extra_opt with space
        --exclude) 
            exclude=${exclude+"$exclude "}$2; shift;;
        --incremental|-i) 
            incremental=1;;
        -o)
            output=$2; shift;;
    esac
    shift
done


# handle

. "`backup-include mysql`"

if [[ ! -z $output ]]; then 
    # manual backup
    backup_mysql_full "$db" "$user" "$pass" "$exclude" "$extra_opt" "$output"
else 
    # automated backup
    mkdir -p "$BACKUP_DIR/.sql/$BACKUP_DATE"
    mkdir -p "$BACKUP_DIR/$BACKUP_DATE/db"

    if [[ $incremental == 1 ]]; then       
        # workaround for backup-rotate: it depends on mtime, but incremental
        # backup removes .sql from old dir thus modifying its mtime; so we 
        # preserve old dir's mtime manually
        old_date=`stat -c '%y' "$BACKUP_DIR/.sql/$BACKUP_PREV_DATE"`

        # backup
        old="$BACKUP_DIR/.sql/$BACKUP_PREV_DATE/$db.sql"
        new="$BACKUP_DIR/.sql/$BACKUP_DATE/$db.sql"
        dst="$BACKUP_DIR/$BACKUP_DATE/db/$db.sql.inc"
        backup_mysql_incr "$db" "$user" "$pass" "$exclude" "$extra_opt" "$old" "$new" "$dst"

        # workaround for backup-rotate
        old_date=`date -d "$old_date" '+%Y%m%d%H%M'`
        touch -t "$old_date" "$BACKUP_DIR/.sql/$BACKUP_PREV_DATE"
    else
        keep="$BACKUP_DIR/.sql/$BACKUP_DATE/$db.sql"
        dst="$BACKUP_DIR/$BACKUP_DATE/db/$db.sql"
        backup_mysql_full "$db" "$user" "$pass" "$exclude" "$extra_opt" "$dst" "$keep"
    fi
fi

